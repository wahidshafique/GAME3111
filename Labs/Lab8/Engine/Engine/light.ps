// GLOBALS
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
    float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;
    float4 specularColor;
};

// TYPEDEFS
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
};

// Pixel Shader
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
    float3 reflection;
    float4 specular;

    // Sample pixel color from texture using the sampler at this texture coordinate
	textureColor = shaderTexture.Sample(SampleType, input.tex);

    // Set default output color to the ambient light value for all pixels
    color = ambientColor;

    // Initialize the specular color
    specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	lightDir = -lightDirection;

    // Amount of light on this pixel
    lightIntensity = saturate(dot(input.normal, lightDir));

    // Diffuse color could be negative and it will subtract away some of the ambient color in the addition
    if(lightIntensity > 0.0f)
    {
        // Diffuse color based on diffuse color and amount of light intensity
        color += (diffuseColor * lightIntensity);

        color = saturate(color);

        // Calculate reflection vector based on the light intensity, normal vector, and light direction
        // Reflection vector in this equation has to be produced by multiplying double the light intensity by the vertex normal
        // The direction of the light is subtracted which then gives the reflection vector between the light source and the viewing angle
        reflection = normalize(2 * lightIntensity * input.normal - lightDir);

        // The amount of specular light is then calculated using the reflection vector and the viewing direction
        // The smaller the angle between the viewer and the light source
        // The greater the specular light reflect will be
        specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
    }

    // Multiply texture pixel and final diffuse color to get final pixel color
	color = color * textureColor;

    // Don't add specular effect until the end. It is a highlight and needs to be added to the final value or it will now show up properly
    color = saturate(color + specular);

	return color;
}